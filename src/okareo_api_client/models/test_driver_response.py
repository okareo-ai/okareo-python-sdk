from typing import Any, Dict, List, Type, TypeVar, Union

from attrs import define as _attrs_define
from attrs import field as _attrs_field

from ..types import UNSET, Unset

T = TypeVar("T", bound="TestDriverResponse")


@_attrs_define
class TestDriverResponse:
    """
    Attributes:
        text_response (str): The text response generated by the driver model for the test input.
        voice_response (Union[Unset, str]): The voice response generated by the driver model for the test input, if
            applicable. Encoded as a base64 string.
    """

    text_response: str
    voice_response: Union[Unset, str] = UNSET
    additional_properties: Dict[str, Any] = _attrs_field(init=False, factory=dict)

    def to_dict(self) -> Dict[str, Any]:
        text_response = self.text_response
        voice_response = self.voice_response

        field_dict: Dict[str, Any] = {}
        field_dict.update(self.additional_properties)
        field_dict.update(
            {
                "text_response": text_response,
            }
        )
        if voice_response is not UNSET:
            field_dict["voice_response"] = voice_response

        return field_dict

    @classmethod
    def from_dict(cls: Type[T], src_dict: Dict[str, Any]) -> T:
        d = src_dict.copy()
        text_response = d.pop("text_response")

        voice_response = d.pop("voice_response", UNSET)

        test_driver_response = cls(
            text_response=text_response,
            voice_response=voice_response,
        )

        test_driver_response.additional_properties = d
        return test_driver_response

    @property
    def additional_keys(self) -> List[str]:
        return list(self.additional_properties.keys())

    def __getitem__(self, key: str) -> Any:
        return self.additional_properties[key]

    def __setitem__(self, key: str, value: Any) -> None:
        self.additional_properties[key] = value

    def __delitem__(self, key: str) -> None:
        del self.additional_properties[key]

    def __contains__(self, key: str) -> bool:
        return key in self.additional_properties
